#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef DOTFACELITE_SWIFT_H
#define DOTFACELITE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DotFaceLite",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class DOTFLImageSize;
@class NSData;

/// Raw image with BGRA8888 pixel format.
SWIFT_CLASS_NAMED("BgraRawImage")
@interface DOTFLBgraRawImage : NSObject
/// Image size.
@property (nonatomic, readonly, strong) DOTFLImageSize * _Nonnull size;
/// Raw image data.
@property (nonatomic, copy) NSData * _Nonnull bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create <code>BgraRawImage</code> from raw image data with BGRA8888 pixel format.
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes size:(DOTFLImageSize * _Nonnull)size;
@end


@class CIImage;
@class CIContext;

/// Create <code>BgraRawImage</code> from iOS native image types.
SWIFT_CLASS_NAMED("BgraRawImageFactory")
@interface DOTFLBgraRawImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>CGImage</code> as a <code>BgraRawImage</code> object.
/// \param cgImage Input image as a <code>CGImage</code> object.
///
///
/// returns:
/// New <code>BgraRawImage</code> instance.
+ (DOTFLBgraRawImage * _Nonnull)createWithCgImage:(CGImageRef _Nonnull)cgImage SWIFT_WARN_UNUSED_RESULT;
/// Return a copy of the <code>CIImage</code> as a <code>BgraRawImage</code> object.
/// \param ciImage Input image as a <code>CIImage</code> object.
///
/// \param ciContext CIContext.
///
///
/// returns:
/// New <code>BgraRawImage</code> instance.
+ (DOTFLBgraRawImage * _Nonnull)createWithCiImage:(CIImage * _Nonnull)ciImage ciContext:(CIContext * _Nonnull)ciContext SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;
@class DOTFLFaceAutoCaptureFrameParameters;

/// Use this protocol to create face validators.
SWIFT_PROTOCOL_NAMED("FaceAutoCaptureDetectionValidator")
@protocol DOTFLFaceAutoCaptureDetectionValidator
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Validate current frame parameters.
/// \param faceAutoCaptureFrameParameters Current frame parameters.
///
///
/// returns:
/// Returns <code>false</code> for the failed validation and <code>true</code> for the successful validation.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


/// Validate maximum brightness of the detected face.
/// To use this validator also following validators must be applied: <code>FaceOutOfBoundsValidator</code>.
SWIFT_CLASS_NAMED("BrightnessTooHighValidator")
@interface DOTFLBrightnessTooHighValidator : NSObject <DOTFLFaceAutoCaptureDetectionValidator>
/// Default threshold value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultThreshold;)
+ (double)defaultThreshold SWIFT_WARN_UNUSED_RESULT;
/// Current maximal accepted brightness.
@property (nonatomic, readonly) double threshold;
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Initialize with custom threshold.
- (nullable instancetype)initWithThreshold:(double)threshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default threshold.
- (nonnull instancetype)init;
/// Validate brightness of the detected face.
/// \param faceAutoCaptureFrameParameters Frame parameters to validate.
///
///
/// returns:
/// Returns <code>false</code> for bright face.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


/// Validate minimum brightness of the detected face.
/// To use this validator also following validators must be applied: <code>FaceOutOfBoundsValidator</code>.
SWIFT_CLASS_NAMED("BrightnessTooLowValidator")
@interface DOTFLBrightnessTooLowValidator : NSObject <DOTFLFaceAutoCaptureDetectionValidator>
/// Default threshold value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultThreshold;)
+ (double)defaultThreshold SWIFT_WARN_UNUSED_RESULT;
/// Current minimal accepted brightness.
@property (nonatomic, readonly) double threshold;
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Initialize with custom threshold.
- (nullable instancetype)initWithThreshold:(double)threshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default threshold.
- (nonnull instancetype)init;
/// Validate brightness of the detected face.
/// \param faceAutoCaptureFrameParameters Frame parameters to validate.
///
///
/// returns:
/// Returns <code>false</code> for dark face.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


/// Create <code>CGImage</code> from <code>BgraRawImage</code>.
SWIFT_CLASS_NAMED("CGImageFactory")
@interface DOTFLCGImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>BgraRawImage</code> as a <code>CGImage</code> object.
/// \param bgraRawImage Input image as a <code>BgraRawImage</code> object.
///
///
/// returns:
/// New <code>CGImage</code> instance.
+ (CGImageRef _Nonnull)createWithBgraRawImage:(DOTFLBgraRawImage * _Nonnull)bgraRawImage SWIFT_WARN_UNUSED_RESULT;
@end


/// Create <code>CIImage</code> from <code>BgraRawImage</code>.
SWIFT_CLASS_NAMED("CIImageFactory")
@interface DOTFLCIImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>BgraRawImage</code> as a <code>CIImage</code> object.
/// \param bgraRawImage Input image as a <code>BgraRawImage</code> object.
///
///
/// returns:
/// New <code>CIImage</code> instance.
+ (CIImage * _Nonnull)createWithBgraRawImage:(DOTFLBgraRawImage * _Nonnull)bgraRawImage SWIFT_WARN_UNUSED_RESULT;
@end

/// Facing of the camera on the device.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTFLCameraFacing, "CameraFacing", open) {
/// Front facing camera.
  DOTFLCameraFacingFront = 0,
/// Back facing camera.
  DOTFLCameraFacingBack = 1,
};

/// Indicates how the layer displays video frames.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTFLCameraPreviewScaleType, "CameraPreviewScaleType", open) {
/// Entire video frame is displayed. Video frame is centered and fits within the preview layer bounds.
/// The preview layer may contain empty vertical or horizontal regions. This is recommended configuration, becuase it maximizes resolution of images captured during an auto capture process.
  DOTFLCameraPreviewScaleTypeFit = 0,
/// Entire preview layer is filled with video frame content. Video frame is centered and may extend beyond the preview layer bounds.
/// This configuration may produce images with lower resolution (compared to <code>fit</code> case) during an auto capture process.
  DOTFLCameraPreviewScaleTypeFill = 1,
};

@class DOTFLPointDouble;

/// The position of the detected face in the image.
SWIFT_CLASS_NAMED("DetectionPosition")
@interface DOTFLDetectionPosition : NSObject
/// Center of the face in the image.
@property (nonatomic, readonly, strong) DOTFLPointDouble * _Nonnull center;
/// Diameter of the face circle represented as a ratio to the image shorter side.
@property (nonatomic, readonly) double sizeToImageShorterSideRatio;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithCenter:(DOTFLPointDouble * _Nonnull)center sizeToImageShorterSideRatio:(double)sizeToImageShorterSideRatio OBJC_DESIGNATED_INITIALIZER;
@end



/// Class storing the global properties of the <code>DotFaceLite</code> framework.
SWIFT_CLASS("_TtC11DotFaceLite18DotFaceLiteLibrary")
@interface DotFaceLiteLibrary : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Version of the <code>DotFaceLite</code> framework.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionName;)
+ (NSString * _Nonnull)versionName SWIFT_WARN_UNUSED_RESULT;
@end

@class DOTFLQualityAttributeThresholds;

/// Configuration options for the face auto capture process.
SWIFT_CLASS_NAMED("FaceAutoCaptureConfiguration")
@interface DOTFLFaceAutoCaptureConfiguration : NSObject
/// Customize thresholds for the quality attributes of the face auto capture result.
@property (nonatomic, readonly, strong) DOTFLQualityAttributeThresholds * _Nonnull qualityAttributeThresholds;
/// Use this flag to show or hide detection circle during the face auto capture process. Default is <code>false</code>.
@property (nonatomic, readonly) BOOL isDetectionLayerVisible;
/// Specify camera facing. Default is <code>.front</code>.
@property (nonatomic, readonly) enum DOTFLCameraFacing cameraFacing;
/// Specify camera preview scale type. Default is <code>.fit</code>.
@property (nonatomic, readonly) enum DOTFLCameraPreviewScaleType cameraPreviewScaleType;
/// Create the face auto capture configuration.
- (nonnull instancetype)initWithQualityAttributeThresholds:(DOTFLQualityAttributeThresholds * _Nonnull)qualityAttributeThresholds isDetectionLayerVisible:(BOOL)isDetectionLayerVisible cameraFacing:(enum DOTFLCameraFacing)cameraFacing cameraPreviewScaleType:(enum DOTFLCameraPreviewScaleType)cameraPreviewScaleType;
/// Create the face auto capture configuration with default values.
- (nonnull instancetype)init;
@end

@class DOTFLIntervalDouble;

/// Configure thresholds for the quality attributes of the face auto capture result.
SWIFT_CLASS_NAMED("QualityAttributeThresholds")
@interface DOTFLQualityAttributeThresholds : NSObject
/// Minimal face detection confidence.
@property (nonatomic, readonly) double minConfidence;
/// Size ratio interval for the detected face.
@property (nonatomic, readonly, strong) DOTFLIntervalDouble * _Nonnull sizeInterval;
- (nullable instancetype)initWithMinConfidence:(double)minConfidence sizeInterval:(DOTFLIntervalDouble * _Nonnull)sizeInterval error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class DOTFLFaceAutoCaptureControllerConfiguration;
@class DOTFLFaceAutoCaptureControllerProcessingResult;

/// Non-UI component for the face auto capture process.
SWIFT_CLASS_NAMED("FaceAutoCaptureController")
@interface DOTFLFaceAutoCaptureController : NSObject
/// Current configuration.
@property (nonatomic, readonly, strong) DOTFLFaceAutoCaptureControllerConfiguration * _Nonnull configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create new instance of <code>FaceAutoCaptureController</code>.
- (nonnull instancetype)initWithConfiguration:(DOTFLFaceAutoCaptureControllerConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Restart auto capture process.
- (void)restart;
/// Process an input image or video frame and update the state.
/// \param bgraRawImage Input image.
///
/// \param timestampMillis Input image timestamp.
///
///
/// throws:
/// If you call this method after the face auto capture process has finished, it will throw an error.
///
/// returns:
/// The result of processing of the input image.
- (DOTFLFaceAutoCaptureControllerProcessingResult * _Nullable)processWithBgraRawImage:(DOTFLBgraRawImage * _Nonnull)bgraRawImage timestampMillis:(NSInteger)timestampMillis error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Event occuring during the face auto capture process.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTFLFaceAutoCaptureControllerEvent, "Event", open) {
/// Candidate selection has started.
  DOTFLFaceAutoCaptureControllerEventCandidateSelectionStarted = 0,
/// Detected face was captured.
  DOTFLFaceAutoCaptureControllerEventCaptured = 1,
};


/// Objective-C wrapper of <code>Event</code>.
SWIFT_CLASS_NAMED("WrappedEvent")
@interface DOTFLFaceAutoCaptureControllerWrappedEvent : NSObject
@property (nonatomic, readonly) enum DOTFLFaceAutoCaptureControllerEvent event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithEvent:(enum DOTFLFaceAutoCaptureControllerEvent)event OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class DOTFLFaceAutoCaptureDetection;
@class DOTFLFaceAutoCaptureResult;

/// The result returned from the processing of one image during the face auto capture process.
SWIFT_CLASS_NAMED("ProcessingResult")
@interface DOTFLFaceAutoCaptureControllerProcessingResult : NSObject
/// The result of processing video frame during the face auto capture process.
@property (nonatomic, readonly, strong) DOTFLFaceAutoCaptureDetection * _Nonnull detection;
/// The final result of the face auto capture process.
@property (nonatomic, readonly, strong) DOTFLFaceAutoCaptureResult * _Nullable result;
/// Events which occured during the processing of the image.
@property (nonatomic, readonly, copy) NSSet<DOTFLFaceAutoCaptureControllerWrappedEvent *> * _Nonnull events;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDetection:(DOTFLFaceAutoCaptureDetection * _Nonnull)detection result:(DOTFLFaceAutoCaptureResult * _Nullable)result events:(NSSet<DOTFLFaceAutoCaptureControllerWrappedEvent *> * _Nonnull)events OBJC_DESIGNATED_INITIALIZER;
@end


@class DOTFLRectangleDouble;

/// Configuration of the face auto capture non-UI component.
SWIFT_CLASS_NAMED("FaceAutoCaptureControllerConfiguration")
@interface DOTFLFaceAutoCaptureControllerConfiguration : NSObject
/// Minimum number of valid frames in a row to start candidate selection. Default is 2.
@property (nonatomic, readonly) NSInteger minValidFramesInRowToStartCandidateSelection;
/// Duration of candidate selection phase. Default is 1000.
@property (nonatomic, readonly) NSInteger candidateSelectionDurationMillis;
/// Normalized rectangle which represents the region in the image which will be used for the face detection.
@property (nonatomic, readonly, strong) DOTFLRectangleDouble * _Nullable detectionNormalizedRectangle;
/// Array of validators which will be used to validate the face detection result.
@property (nonatomic, readonly, copy) NSArray<id <DOTFLFaceAutoCaptureDetectionValidator>> * _Nonnull validators;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create face auto capture controller configuration.
/// \param minValidFramesInRowToStartCandidateSelection Minimum number of valid frames in a row to start candidate selection.
///
/// \param candidateSelectionDurationMillis Duration of candidate selection phase.
///
/// \param detectionNormalizedRectangle Normalized rectangle in the input image used for face detection.
///
/// \param validators Array of validators which will be used to validate input image.
///
///
/// throws:
/// Throws an error when validator dependencies are missing.
- (nullable instancetype)initWithMinValidFramesInRowToStartCandidateSelection:(NSInteger)minValidFramesInRowToStartCandidateSelection candidateSelectionDurationMillis:(NSInteger)candidateSelectionDurationMillis detectionNormalizedRectangle:(DOTFLRectangleDouble * _Nullable)detectionNormalizedRectangle validators:(NSArray<id <DOTFLFaceAutoCaptureDetectionValidator>> * _Nonnull)validators error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTFLFaceDetectorResult;

/// The result of the image processing during the face auto capture process.
SWIFT_CLASS_NAMED("FaceAutoCaptureDetection")
@interface DOTFLFaceAutoCaptureDetection : NSObject
/// Detection image.
@property (nonatomic, readonly, strong) DOTFLBgraRawImage * _Nonnull bgraRawImage;
/// Face detection result.
@property (nonatomic, readonly, strong) DOTFLFaceDetectorResult * _Nonnull faceDetectorResult;
/// Position of the detected face in the detection image.
@property (nonatomic, readonly, strong) DOTFLDetectionPosition * _Nullable position;
/// Validator identifiers for which the validation has failed.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull validatorIdentifiers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBgraRawImage:(DOTFLBgraRawImage * _Nonnull)bgraRawImage faceDetectorResult:(DOTFLFaceDetectorResult * _Nonnull)faceDetectorResult position:(DOTFLDetectionPosition * _Nullable)position validatorIdentifiers:(NSArray<NSString *> * _Nonnull)validatorIdentifiers OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Information from the detection process about the detected face.
SWIFT_CLASS_NAMED("FaceAutoCaptureFrameParameters")
@interface DOTFLFaceAutoCaptureFrameParameters : NSObject
/// Face detection result.
@property (nonatomic, readonly, strong) DOTFLFaceDetectorResult * _Nonnull faceDetectorResult;
/// Face detection position.
@property (nonatomic, readonly, strong) DOTFLDetectionPosition * _Nullable detectionPosition;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFaceDetectorResult:(DOTFLFaceDetectorResult * _Nonnull)faceDetectorResult detectionPosition:(DOTFLDetectionPosition * _Nullable)detectionPosition OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// The final result of the face auto capture process.
SWIFT_CLASS_NAMED("FaceAutoCaptureResult")
@interface DOTFLFaceAutoCaptureResult : NSObject
/// Face image.
@property (nonatomic, readonly, strong) DOTFLBgraRawImage * _Nonnull bgraRawImage;
/// Face detection result.
@property (nonatomic, readonly, strong) DOTFLFaceDetectorResult * _Nonnull faceDetectorResult;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBgraRawImage:(DOTFLBgraRawImage * _Nonnull)bgraRawImage faceDetectorResult:(DOTFLFaceDetectorResult * _Nonnull)faceDetectorResult OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class UIColor;
@class UIFont;

/// Customization options for the face auto capture user interface.
SWIFT_CLASS_NAMED("FaceAutoCaptureStyle")
@interface DOTFLFaceAutoCaptureStyle : NSObject
/// Background color of top level view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Instruction label font.
@property (nonatomic, readonly, strong) UIFont * _Nonnull instructionFont;
/// Instruction label text color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull instructionTextColor;
/// Instruction label text color during candidate selection phase.
@property (nonatomic, readonly, strong) UIColor * _Nonnull instructionCandidateSelectionTextColor;
/// Instruction background color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull instructionBackgroundColor;
/// Instruction background color during candidate selection phase.
@property (nonatomic, readonly, strong) UIColor * _Nonnull instructionCandidateSelectionBackgroundColor;
/// Placeholder color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull placeholderColor;
/// Placeholder color during candidate selection phase.
@property (nonatomic, readonly, strong) UIColor * _Nonnull placeholderCandidateSelectionColor;
/// Detection layer color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull detectionLayerColor;
/// Overlay color, semi-transparent color is recommended.
@property (nonatomic, readonly, strong) UIColor * _Nonnull overlayColor;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor instructionFont:(UIFont * _Nonnull)instructionFont instructionTextColor:(UIColor * _Nonnull)instructionTextColor instructionCandidateSelectionTextColor:(UIColor * _Nonnull)instructionCandidateSelectionTextColor instructionBackgroundColor:(UIColor * _Nonnull)instructionBackgroundColor instructionCandidateSelectionBackgroundColor:(UIColor * _Nonnull)instructionCandidateSelectionBackgroundColor placeholderColor:(UIColor * _Nonnull)placeholderColor placeholderCandidateSelectionColor:(UIColor * _Nonnull)placeholderCandidateSelectionColor detectionLayerColor:(UIColor * _Nonnull)detectionLayerColor overlayColor:(UIColor * _Nonnull)overlayColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DOTFLFaceAutoCaptureViewControllerDelegate;
@class NSCoder;
@class NSBundle;

/// UI component for capturing face images using the placeholder.
SWIFT_CLASS_NAMED("FaceAutoCaptureViewController")
@interface DOTFLFaceAutoCaptureViewController : UIViewController
/// Current configuration.
@property (nonatomic, readonly, strong) DOTFLFaceAutoCaptureConfiguration * _Nonnull configuration;
/// Current style.
@property (nonatomic, readonly, strong) DOTFLFaceAutoCaptureStyle * _Nonnull style;
/// Set this delegate to handle the face auto capture events.
@property (nonatomic, weak) id <DOTFLFaceAutoCaptureViewControllerDelegate> _Nullable delegate;
/// Create new <code>FaceAutoCaptureViewController</code>.
/// \param configuration Configure the face auto capture process.
///
/// \param style Customize user interface.
///
///
/// returns:
/// New instance of <code>FaceAutoCaptureViewController</code>.
+ (DOTFLFaceAutoCaptureViewController * _Nonnull)createWithConfiguration:(DOTFLFaceAutoCaptureConfiguration * _Nonnull)configuration style:(DOTFLFaceAutoCaptureStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
/// Start the face auto capture process.
- (void)start;
/// Restart the face auto capture process.
- (void)restart;
/// Stop the face auto capture process asynchronously. Wait for the delegate callback <code>faceAutoCaptureViewControllerStopped()</code>.
- (void)stopAsync;
/// Request capture of the next detection.
- (void)requestCapture;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@protocol UIViewControllerTransitionCoordinator;

@interface DOTFLFaceAutoCaptureViewController (SWIFT_EXTENSION(DotFaceLite))
- (void)viewDidLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end




/// Implement this delegate to handle the face auto capture events.
SWIFT_PROTOCOL_NAMED("FaceAutoCaptureViewControllerDelegate")
@protocol DOTFLFaceAutoCaptureViewControllerDelegate
/// Tells the delegate that the face was captured.
- (void)faceLiteAutoCaptureViewController:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController captured:(DOTFLFaceAutoCaptureResult * _Nonnull)result;
@optional
/// Tells the delegate that the new detection was processed.
- (void)faceLiteAutoCaptureViewController:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController processed:(DOTFLFaceAutoCaptureDetection * _Nonnull)detection;
/// Tells the delegate that the candidate selection phase has started.
- (void)faceLiteAutoCaptureViewControllerCandidateSelectionStarted:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that the component has stopped.
- (void)faceLiteAutoCaptureViewControllerStopped:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that you have no permission for camera usage.
- (void)faceLiteAutoCaptureViewControllerNoCameraPermission:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceLiteAutoCaptureViewControllerViewDidLoad:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceLiteAutoCaptureViewControllerViewDidLayoutSubviews:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceLiteAutoCaptureViewControllerViewWillAppear:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceLiteAutoCaptureViewControllerViewDidAppear:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceLiteAutoCaptureViewControllerViewWillDisappear:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceLiteAutoCaptureViewControllerViewDidDisappear:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceLiteAutoCaptureViewControllerViewWillTransition:(DOTFLFaceAutoCaptureViewController * _Nonnull)viewController;
@end


/// Stateless class which can detect face in an image.
SWIFT_CLASS_NAMED("FaceDetector")
@interface DOTFLFaceDetector : NSObject
/// Detect face in an image and return the result.
/// \param bgraRawImage Image used for the face detection.
///
///
/// returns:
/// The face detection result.
- (DOTFLFaceDetectorResult * _Nullable)detectWithBgraRawImage:(DOTFLBgraRawImage * _Nonnull)bgraRawImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTFLImageParameters;

/// Result of the face detection operation.
SWIFT_CLASS_NAMED("Result")
@interface DOTFLFaceDetectorResult : NSObject
/// Face detection confidence in range [0, 1.0]. Where 0 means low confidence and 1.0 means high confidence.
@property (nonatomic, readonly) double confidence;
/// Normalized rectangle representing the position of the detected face in the image. The rectangle is normalized to image size.
@property (nonatomic, readonly, strong) DOTFLRectangleDouble * _Nullable normalizedRectangle;
/// Parameters of the image which was used for the face detection.
@property (nonatomic, readonly, strong) DOTFLImageParameters * _Nullable imageParameters;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithConfidence:(double)confidence normalizedRectangle:(DOTFLRectangleDouble * _Nullable)normalizedRectangle imageParameters:(DOTFLImageParameters * _Nullable)imageParameters OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Validates confidence of the detected face.
SWIFT_CLASS_NAMED("FaceNotDetectedValidator")
@interface DOTFLFaceNotDetectedValidator : NSObject <DOTFLFaceAutoCaptureDetectionValidator>
/// Default threshold value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultMinConfidenceThreshold;)
+ (double)defaultMinConfidenceThreshold SWIFT_WARN_UNUSED_RESULT;
/// Current minimal accepted confidence.
@property (nonatomic, readonly) double minConfidenceThreshold;
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Initialize with custom threshold.
- (nullable instancetype)initWithMinConfidenceThreshold:(double)minConfidenceThreshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default threshold.
- (nonnull instancetype)init;
/// Validate confidence of the detected face.
/// \param faceAutoCaptureFrameParameters Frame parameters to validate.
///
///
/// returns:
/// Returns <code>false</code> to indicate there was no suitable face detected in the image.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


/// Validate if the detected face is within the specified bounds.
SWIFT_CLASS_NAMED("FaceOutOfBoundsValidator")
@interface DOTFLFaceOutOfBoundsValidator : NSObject <DOTFLFaceAutoCaptureDetectionValidator>
/// Default threshold value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultMinEdgeDistanceToImageShorterSideRatioThreshold;)
+ (double)defaultMinEdgeDistanceToImageShorterSideRatioThreshold SWIFT_WARN_UNUSED_RESULT;
/// Current margin to image side ratio threshold.
@property (nonatomic, readonly) double minEdgeDistanceToImageShorterSideRatioThreshold;
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Initialize with custom threshold.
- (nullable instancetype)initWithMinEdgeDistanceToImageShorterSideRatioThreshold:(double)minEdgeDistanceToImageShorterSideRatioThreshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default threshold.
- (nonnull instancetype)init;
/// Validate if the detected face is within the specified bounds.
/// \param faceAutoCaptureFrameParameters Frame parameters to validate.
///
///
/// returns:
/// Returns <code>false</code> for out of bounds face.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


/// Parameters of the image which was used for the face detection.
SWIFT_CLASS_NAMED("ImageParameters")
@interface DOTFLImageParameters : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize <code>ImageParameters</code> with normalized values in range [0, 1.0].
- (nonnull instancetype)initWithSharpness:(double)sharpness brightness:(double)brightness OBJC_DESIGNATED_INITIALIZER;
/// Overall brightness of the face in range [0, 1.0]. Where 0 means low brightness and 1.0 means high brightness.
@property (nonatomic, readonly) double brightness;
/// Overall sharpness of the face in range [0, 1.0]. Where 0 means low sharpness and 1.0 means high sharpness.
@property (nonatomic, readonly) double sharpness;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Image size in pixels.
SWIFT_CLASS_NAMED("ImageSize")
@interface DOTFLImageSize : NSObject
/// Image width in pixels.
@property (nonatomic, readonly) NSInteger width;
/// Image height in pixels.
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
/// Calculate the number of pixels of the image.
- (NSInteger)calculatePixelCount SWIFT_WARN_UNUSED_RESULT;
/// Calculate width to height ratio.
- (double)calculateWidthToHeightRatio SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end




/// Representation of closed interval with value type <code>Double</code>.
/// The <code>max</code> must be greater than the <code>min</code>.
SWIFT_CLASS_NAMED("IntervalDouble")
@interface DOTFLIntervalDouble : NSObject
/// Minimal interval value.
@property (nonatomic, readonly) double min;
/// Maximal interval value.
@property (nonatomic, readonly) double max;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithMin:(double)min max:(double)max error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Representation of closed interval with value type <code>Float</code>.
/// The <code>max</code> must be greater than the <code>min</code>.
SWIFT_CLASS_NAMED("IntervalFloat")
@interface DOTFLIntervalFloat : NSObject
/// Minimal interval value.
@property (nonatomic, readonly) float min;
/// Maximal interval value.
@property (nonatomic, readonly) float max;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithMin:(float)min max:(float)max error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Class responsible for the localization of user interface strings.
SWIFT_CLASS_NAMED("Localization")
@interface DotFaceLiteLocalization : NSObject
/// You can override default iOS localization mechanism by providing custom translation dictionary.
/// note:
/// You also need to set <code>useLocalizationDictionary</code> flag to <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// If you set this to <code>true</code>, <code>localizationDictionary</code> will be used to localize strings. Default value is <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useLocalizationDictionary;)
+ (BOOL)useLocalizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseLocalizationDictionary:(BOOL)value;
/// Bundle used to localize strings. If you want to use your own localized strings, set this to your application bundle - typically <code>Bundle.main</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DotFaceLiteLoggerLogLevel : NSInteger;

/// Static class responsible for generating logs. You can configure log level.
SWIFT_CLASS_NAMED("Logger")
@interface DotFaceLiteLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Log level currently in use. Default value is <code>.none</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DotFaceLiteLoggerLogLevel logLevel;)
+ (enum DotFaceLiteLoggerLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum DotFaceLiteLoggerLogLevel)value;
+ (void)info:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)debug:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)warning:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)error:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
@end

/// Available log levels.
typedef SWIFT_ENUM_NAMED(NSInteger, DotFaceLiteLoggerLogLevel, "LogLevel", open) {
/// Logs informative events.
  DotFaceLiteLoggerLogLevelInfo = 0,
/// Logs events suitable for debugging purposes.
  DotFaceLiteLoggerLogLevelDebug = 1,
/// Logs unexpected events which indicate malfunction.
  DotFaceLiteLoggerLogLevelWarning = 2,
/// Logs failed operations and other errors.
  DotFaceLiteLoggerLogLevelError = 3,
/// Disables logging.
  DotFaceLiteLoggerLogLevelNone = 4,
};


/// Two dimensional point with <code>Double</code> value type.
SWIFT_CLASS_NAMED("PointDouble")
@interface DOTFLPointDouble : NSObject
/// X coordinate.
@property (nonatomic, readonly) double x;
/// Y coordinate.
@property (nonatomic, readonly) double y;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithX:(double)x y:(double)y OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end




/// Rectangle area defined by the edges with <code>Double</code> value type.
SWIFT_CLASS_NAMED("RectangleDouble")
@interface DOTFLRectangleDouble : NSObject
/// Left edge.
@property (nonatomic, readonly) double left;
/// Top edge.
@property (nonatomic, readonly) double top;
/// Right edge.
@property (nonatomic, readonly) double right;
/// Bottom edge.
@property (nonatomic, readonly) double bottom;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLeft:(double)left top:(double)top right:(double)right bottom:(double)bottom OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end






/// Validate minimum sharpness of the detected face.
/// To use this validator also following validators must be applied: <code>FaceOutOfBoundsValidator</code>.
SWIFT_CLASS_NAMED("SharpnessTooLowValidator")
@interface DOTFLSharpnessTooLowValidator : NSObject <DOTFLFaceAutoCaptureDetectionValidator>
/// Default threshold value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultThreshold;)
+ (double)defaultThreshold SWIFT_WARN_UNUSED_RESULT;
/// Current minimal accepted sharpness.
@property (nonatomic, readonly) double threshold;
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Initialize with custom threshold.
- (nullable instancetype)initWithThreshold:(double)threshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default threshold.
- (nonnull instancetype)init;
/// Validate sharpness of the detected face.
/// \param faceAutoCaptureFrameParameters Frame parameters to validate.
///
///
/// returns:
/// Returns <code>false</code> for blurry face.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


/// Validate size of the detected face.
SWIFT_CLASS_NAMED("SizeTooLargeValidator")
@interface DOTFLSizeTooLargeValidator : NSObject <DOTFLFaceAutoCaptureDetectionValidator>
/// Default threshold value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultMaxDetectionSizeToImageShorterSideRatioThreshold;)
+ (double)defaultMaxDetectionSizeToImageShorterSideRatioThreshold SWIFT_WARN_UNUSED_RESULT;
/// Current maximal accepted size.
@property (nonatomic, readonly) double maxDetectionSizeToImageShorterSideRatioThreshold;
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Initialize with custom threshold.
- (nullable instancetype)initWithMaxDetectionSizeToImageShorterSideRatioThreshold:(double)maxDetectionSizeToImageShorterSideRatioThreshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default threshold.
- (nonnull instancetype)init;
/// Validate size of the detected face.
/// \param faceAutoCaptureFrameParameters Frame parameters to validate.
///
///
/// returns:
/// Returns <code>false</code> for large face.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


/// Validate size of the detected face.
SWIFT_CLASS_NAMED("SizeTooSmallValidator")
@interface DOTFLSizeTooSmallValidator : NSObject <DOTFLFaceAutoCaptureDetectionValidator>
/// Default threshold value.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double defaultMinDetectionSizeToImageShorterSideRatioThreshold;)
+ (double)defaultMinDetectionSizeToImageShorterSideRatioThreshold SWIFT_WARN_UNUSED_RESULT;
/// Current minimal accepted size.
@property (nonatomic, readonly) double minDetectionSizeToImageShorterSideRatioThreshold;
/// Validator identifier to address failed validation.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Set of validator identifiers which represents a set of dependencies for this validator.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull dependencyIdentifiers;
/// Initialize with custom threshold.
- (nullable instancetype)initWithMinDetectionSizeToImageShorterSideRatioThreshold:(double)minDetectionSizeToImageShorterSideRatioThreshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default threshold.
- (nonnull instancetype)init;
/// Validate size of the detected face.
/// \param faceAutoCaptureFrameParameters Frame parameters to validate.
///
///
/// returns:
/// Returns <code>false</code> for small face.
- (BOOL)validateWithFaceAutoCaptureFrameParameters:(DOTFLFaceAutoCaptureFrameParameters * _Nonnull)faceAutoCaptureFrameParameters SWIFT_WARN_UNUSED_RESULT;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
